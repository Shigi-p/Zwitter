{"version":3,"sources":["Zwitter.js","Exam.js","App.js","serviceWorker.js","index.js"],"names":["Zwitter","className","React","Component","Exam","props","state","subjectsName","subjectYear","setSubjectName","bind","setSubjectYear","name","this","setState","year","exact","path","render","SelectSubjects","subjects","decideSubjectsAndYear","axios","get","then","subjectsResponse","i","push","data","results","examResponse","years","j","length","subject","Math","max","apply","Infinity","console","log","catch","err","map","index","key","to","onClick","SubjectPosts","App","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46a9d00b.chunk.js","sourcesContent":["import React from 'react';\n\nimport { BrowserRouter as Router, Link } from 'react-router-dom';\n\nclass Zwitter extends React.Component {\n  render() {\n    return (\n      <div className=\"Zwitter\">\n        <h1>This is Zwitter.</h1>\n      </div>\n    )\n  }\n}\n\nexport default Zwitter;","import React from 'react';\nimport './Exam.css';\n\nimport axios from 'axios';\n\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nclass Exam extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subjectsName: null,\n      subjectYear: null,\n    }\n    this.setSubjectName = this.setSubjectName.bind(this);\n    this.setSubjectYear = this.setSubjectYear.bind(this);\n  }\n\n  setSubjectName(name) {\n    this.setState({\n      subjectsName: name\n    })\n  }\n\n  setSubjectYear(year) {\n    this.setState({\n      subjectYear: year\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"Exam\">\n        <div className=\"ExamContents\">\n          <Router>\n            <Route exact path=\"/exam\" render={() => <SelectSubjects setSubjectName={this.setSubjectName} setSubjectYear={this.setSubjectYear} />} />\n            <Route path={`/exam/${this.state.subjectsName}/${this.state.subjectYear}`} render={() => <SubjectPosts subjectsName={this.state.subjectsName} />} />\n          </Router>\n        </div>\n        <div className=\"RightsideBar\">\n          Config\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Exam;\n\nclass SelectSubjects extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subjects: [],\n      subjectYear: null,\n    }\n    this.decideSubjectsAndYear = this.decideSubjectsAndYear.bind(this);\n  }\n\n  decideSubjectsAndYear(name, year) {\n    this.props.setSubjectName(name);\n    this.props.setSubjectYear(year);\n  }\n\n  componentDidMount() {\n    axios\n      .get('/api/subjects')\n      .then(subjectsResponse => {\n        let subjects = [];\n        for (let i = 0; i < subjectsResponse.data.results.length; i++) {\n          subjects.push(subjectsResponse.data.results[i])\n\n          // 最新の年情報をうまいこと会得する\n          axios\n            .get('/api/exams')\n            .then(examResponse => {\n              let years = [];\n              for (let j = 0; j < examResponse.data.results.length; j++) {\n                if (examResponse.data.results[j].subject.name === subjectsResponse.data.results[i].name) {\n                  years.push(examResponse.data.results[i].year)\n                }\n              }\n              let year = Math.max.apply(null, years);\n              // console.log(subjectsResponse.data.results[i].name + \" \" + year)\n              if (year !== Infinity) {\n                this.props.setSubjectYear(year);\n                this.setState({\n                  subjectYear: year\n                })\n                subjects[i][\"year\"] = year;\n              } else {\n                console.log(\"ERROR!\")\n              }\n\n            })\n            .catch(err => {\n              console.log(err)\n            })\n\n        }\n        this.setState({\n          subjects: subjects\n        })\n        console.log(subjects)\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"SelectSubjects\">\n        {this.state.subjects.map((subject, index) =>\n          <p key={index}>\n            <Link to={`/exam/${subject.name}/${subject.year}`} onClick={() => this.decideSubjectsAndYear(subject.name, subject.year)}>\n              {subject.name}\n            </Link>\n          </p>\n        )}\n      </div>\n    )\n  }\n}\n\nclass SubjectPosts extends React.Component {\n  render() {\n    return (\n      <div className=\"SubjectPosts\">\n        <h1>{this.props.subjectsName}</h1>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nimport Zwitter from './Zwitter.js';\nimport Exam from './Exam.js';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <div className=\"LeftsideBar\">\n            <ul>\n              <li><Link to=\"/\">Zwitter</Link></li>\n              <li><Link to=\"/exam\">Exam</Link></li>\n            </ul>\n          </div>\n          <Route exact path=\"/\" component={Zwitter} />\n          <Route path=\"/exam\" component={Exam} />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// Test Using Axios\n\n// axios\n//   .get('api/users')\n//   .then(response => {\n//     console.log(response.data);\n//   })\n//   .catch(err => {\n//     console.log(err);\n//   })\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}